# Project-related metadata for the Azure PostgreSQL AI library.

[build-system]
requires = ["hatchling~=1.0"]
build-backend = "hatchling.build"

# Dependency groups for development, linting, testing, and type checking.
[dependency-groups]
dev = [
    "jupyterlab~=4.0",
    "llama-index~=0.13.0",
    "openai~=1.0",
]
lint = ["ruff~=0.12.0"]
package = ["build[uv]~=1.0", "twine~=6.0", "uv-secure[faster-async]~=0.12.0"]
test = [
    "numpy~=2.0",
    "pycobertura~=4.0",
    "pytest~=8.0",
    "pytest-asyncio~=1.0",
    "pytest-cov~=6.0",
    "scipy~=1.0",
    "tox~=4.0",
    "tox-uv~=1.0",
]
# TODO(arda): Remove this group once we have a stable/improved GitHub CI pipeline.
test_integration = []
type = ["mypy~=1.0"]

[project]
name = "llama-index-vector-stores-azurepostgres"
version = "0.1.0"
description = "AI framework integrations for Azure Database for PostgreSQL"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Arda Aytekin", email = "8845951+aytekinar@users.noreply.github.com"},
    {name = "Orhan Kislal", email = "kislalorhan@microsoft.com"},
]
keywords = ["azure", "postgresql", "llamaindex", "vectorstore", "database"]
dependencies = [
    # aiohttp needed for azure.identity.aio; should we make it optional?
    "aiohttp~=3.0",
    "azure-identity~=1.0",
    "numpy~=2.0",
    "pgvector~=0.4.0",
    "psycopg[binary,pool]~=3.0",
    "pydantic~=2.0",
    # Needed for typing.Self in 3.10 and typing.override in 3.11
    "typing-extensions~=4.0; python_version < '3.12'",
    "llama-index-core>=0.13,<0.15",
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.hatch.build.targets.sdist]
only-include = ["llama_index/"]

[tool.hatch.build.targets.wheel]
only-include = ["llama_index/"]

[tool.llamahub]
contains_example = false
import_path = "llama_index.vector_stores.azure_postgres"

# Configuration for pytest, the testing framework used in the project.
[tool.pytest]

[tool.pytest.ini_options]
addopts = [
    "--doctest-continue-on-failure",  # Continue running doctests even if some fail
    "--doctest-modules",  # Enable doctest modules
    "--import-mode=importlib",  # Use importlib for (test) module imports
    "-p no:legacypath",  # Disable legacy path handling plugin
    "-r a",  # Show a short test summary for all but passed tests
    "--strict-markers",  # Enable strict markers to ensure all markers are defined
    "--verbose",  # Enable verbose output for pytest
]
markers = [
    "compile: mark placeholder test used to compile integration tests without running them",
    "requires: mark tests as requiring a specific library",
]
asyncio_default_fixture_loop_scope = "session"  # Default event loop scope for asyncio fixtures
asyncio_default_test_loop_scope = "session"  # Default event loop scope for asyncio tests
asyncio_mode = "auto"  # Automatically detect asyncio mode
doctest_encoding = "utf-8"  # Set encoding for doctests
doctest_optionflags = [
    "IGNORE_EXCEPTION_DETAIL",  # Ignore exception details in doctests
    "NUMBER",  # Match floating-point numbers to the precision written in the expected doctest output
    "NORMALIZE_WHITESPACE",  # Normalize whitespace in doctests
]
# log_date_format and log_format mess with TOML parsing/formatting; hence, try
# commenting them out when/if needed.
log_date_format = "%Y-%m-%dT%H:%M:%S%Z"  # Date format for captured logs in pytest
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"  # Log format for captured logs in pytest
log_level = "DEBUG"  # Set the log level for pytest
xfail_strict = true  # Treat xfail tests as failures if they pass

# Configuration for Ruff, the linter used in the project.
[tool.ruff]

[tool.ruff.lint]
extend-select = [
    "UP",  # pyupgrade
    "D",  # pydocstyle
    "SIM",  # flake8-simplify
    "I",  # isort
    "RUF100",  # unused noqa
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google style guide for docstrings

# Configuration for Tox, the test automation framework used in the project.
[tool.tox]
requires = ["tox~=4.0", "tox-uv~=1.0"]
env_list = ["3.10", "3.11", "3.12", "3.13", "lint", "package", "type", "vuln"]

# Environment configuration for the "lint" environment.
[tool.tox.env.lint]
description = "Run lint checks on the code base"
skip_install = true
dependency_groups = ["lint"]
labels = ["lint"]
commands = [["ruff", "check", "llama_index"], ["ruff", "check", "tests"]]

# Environment configuration for the "package" environment.
[tool.tox.env.package]
description = "Run packaging checks on the code base"
skip_install = true
dependency_groups = ["package"]
labels = ["package"]
commands = [
    [
        "python",
        "-m",
        "build",
        "--installer",
        "uv",
        "--outdir",
        "dist",
    ],
    [
        "twine",
        "check",
        "dist/*",
    ],
]

# Environment configuration for the "type" environment.
[tool.tox.env.type]
description = "Run type checks on the code base"
extras = ["llama_index"]
dependency_groups = ["test", "type"]
labels = ["type"]
commands = [["mypy", "llama_index"], ["mypy", "tests"]]

# Environment configuration for the "vuln" environment.
[tool.tox.env.vuln]
description = "Run vulnerability scanning on the code base"
extras = ["llama_index"]
dependency_groups = ["package"]
labels = ["package", "vuln"]
commands = [["uv-secure"]]

# Base environment configuration, which is inherited by all environments.
[tool.tox.env_run_base]
description = "Run tests under Python {base_python}"
extras = ["llama_index"]
dependency_groups = ["test"]
labels = ["test"]
commands = [
    [
        "pytest",
        # HTML coverage report for different Python versions
        "--cov-report=html:htmlcov/{base_python}",
        # XML coverage report for different Python versions
        "--cov-report=xml:cover/{base_python}/cobertura.xml",
    ],
]
pass_env = [
    "AZURE_CLIENT_*",
    "AZURE_TENANT_*",
    "PGAPPNAME",
    "PGDATABASE",
    "PGHOST",
    "PGPASSWORD",
    "PGPORT",
    "PGUSER",
]

# Configuration for uv, the project management tool used in the project.
[tool.uv]
# Dependency groups to install by default
default-groups = "all"
